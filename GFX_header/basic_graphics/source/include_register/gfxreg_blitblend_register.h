/*******************************************************************************
* (c) 2019-2024, Cypress Semiconductor Corporation (an Infineon company) or an *
* affiliate of Cypress Semiconductor Corporation.  All rights reserved.        *
*                                                                              *
* This software, including source code, documentation and related              *
* materials ("Software"), is owned by Cypress Semiconductor Corporation or     *
* one of its affiliates ("Cypress") and is protected by and subject to         *
* worldwide patent protection (United States and foreign), United States       *
* copyright laws and international treaty provisions. Therefore, you may use   *
* this Software only as provided in the license agreement accompanying the     *
* software package from which you obtained this Software ("EULA").             *
*                                                                              *
* If no EULA applies, Cypress hereby grants you a personal, non-exclusive,     *
* non-transferable license to copy, modify, and compile the                    *
* Software source code solely for use in connection with Cypress's             *
* integrated circuit products.  Any reproduction, modification, translation,   *
* compilation, or representation of this Software except as specified          *
* above is prohibited without the express written permission of Cypress.       *
*                                                                              *
* Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO                         *
* WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING,                         *
* BUT NOT LIMITED TO, NONINFRINGEMENT, IMPLIED                                 *
* WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A                              *
* PARTICULAR PURPOSE. Cypress reserves the right to make                       *
* changes to the Software without notice. Cypress does not assume any          *
* liability arising out of the application or use of the Software or any       *
* product or circuit described in the Software. Cypress does not               *
* authorize its products for use in any products where a malfunction or        *
* failure of the Cypress product may reasonably be expected to result in       *
* significant property damage, injury or death ("High Risk Product"). By       *
* including Cypress's product in a High Risk Product, the manufacturer         *
* of such system or application assumes all risk of such use and in doing      *
* so agrees to indemnify Cypress against all liability.                        *
*******************************************************************************/
/******************************************************************************/

/*!
 * \version     0.1
 * \date        Tue May 26 11:58:38 2020
 * \file        gfxreg_blitblend_register.h
 *              This file was generated automatically by agentx 1.00.5.
 *              Design:   blitblend
 *              Source:   blitblend.component.xml
 *              Template: component_h.tpl
 * \brief      Iris blitblend register and field definition
 * Implements Building Block: HWExchangeBlock
 *
 *
 * \ingroup register_definitions
 */

#ifndef GFXREG_BLITBLEND_REGISTER_H
#define GFXREG_BLITBLEND_REGISTER_H

/*! \cond Hide for doxygen */

/******************************************************************************/
/* blitblend registers */
/******************************************************************************/

/* Deviation from MISRA C:2012 Dir-1.1.
   Justification: This cannot be avoided and is supported by the required compiler. */
/* PRQA S 0380 EOF */

/* Deviation from MISRA C:2012 Rule-1.3, Rule-5.2.
   Justification: This cannot be avoided and is supported by the required compiler. */
/* PRQA S 0779 EOF */

/* Deviation from MISRA C:2012 Dir-1.1.
   Justification: The choice of using a function-like macro here is done in order to 
                  allow an easier understanding of the code 
                  without incurring the overhead of a function call.    */
/* PRQA S 3453 EOF */


/* STATICCONTROL: BlitBlend static control register */
#define GFXREG_BLITBLEND_STATICCONTROL 0x00000000U
/* SHDEN: Enables shadowing of all RWS type registers (0=write_through, 1=shadowed). */
#define GFXREG_BLITBLEND_STATICCONTROL_SHDEN_FSHIFT 0U
#define GFXREG_BLITBLEND_STATICCONTROL_SHDEN_FMASK 0x1U
#define GFXREG_BLITBLEND_STATICCONTROL_SETM_SHDEN(val) (((CYGFX_U32)(val) & 0x1UL) )
#define GFXREG_BLITBLEND_STATICCONTROL_SET_SHDEN(val) (((CYGFX_U32)(val) ) | GCCGFX_GEN_ASSERT_FIELD_ACCESS(val, 0x1UL, __FILE__, __LINE__))
#define GFXREG_BLITBLEND_STATICCONTROL_GET_SHDEN(val) (((CYGFX_U32)(val) ) & 0x1UL)
#define GFXREG_BLITBLEND_SETM_SHDEN(s,val) ( (s)->staticcontrol = ((s)->staticcontrol & ~0x1UL) | (((CYGFX_U32)(val) ) & 0x1UL) )
#define GFXREG_BLITBLEND_SET_SHDEN(s,val)  ( (s)->staticcontrol = (((s)->staticcontrol & ~0x1UL) | ((CYGFX_U32)(val) ) ) | GCCGFX_GEN_ASSERT_FIELD_ACCESS(val, 0x1UL, __FILE__, __LINE__) )
#define GFXREG_BLITBLEND_GET_SHDEN(s) ((((s)->staticcontrol) ) & 0x1UL)
#define GFXREG_BLITBLEND_STATICCONTROL_SHDEN_RESET 0U

/* CONTROL: BlitBlend control register */
#define GFXREG_BLITBLEND_CONTROL 0x00000004U
/* MODE: Operation mode for BlitBlend */
#define GFXREG_BLITBLEND_CONTROL_MODE_FSHIFT 0U
#define GFXREG_BLITBLEND_CONTROL_MODE_FMASK 0x1U
#define GFXREG_BLITBLEND_CONTROL_SETM_MODE(val) (((CYGFX_U32)(val) & 0x1UL) )
#define GFXREG_BLITBLEND_CONTROL_SET_MODE(val) (((CYGFX_U32)(val) ) | GCCGFX_GEN_ASSERT_FIELD_ACCESS(val, 0x1UL, __FILE__, __LINE__))
#define GFXREG_BLITBLEND_CONTROL_GET_MODE(val) (((CYGFX_U32)(val) ) & 0x1UL)
#define GFXREG_BLITBLEND_SETM_MODE(s,val) ( (s)->control = ((s)->control & ~0x1UL) | (((CYGFX_U32)(val) ) & 0x1UL) )
#define GFXREG_BLITBLEND_SET_MODE(s,val)  ( (s)->control = (((s)->control & ~0x1UL) | ((CYGFX_U32)(val) ) ) | GCCGFX_GEN_ASSERT_FIELD_ACCESS(val, 0x1UL, __FILE__, __LINE__) )
#define GFXREG_BLITBLEND_GET_MODE(s) ((((s)->control) ) & 0x1UL)
#define GFXREG_BLITBLEND_CONTROL_MODE_NEUTRAL 0x0U /* Neutral mode, only route pixels and commands from primary input to output */
#define GFXREG_BLITBLEND_CONTROL_MODE_OPERATION 0x1U /* Normal Operation */
#define GFXREG_BLITBLEND_CONTROL_MODE_RESET 0x0U

/* NEUTRALBORDER: Neutral border setup register
   The leftmost NeutralBorderLeft and the rightmost NeutralBorderRight pixels of each line of the frame will bypass the blitblend unit from primary or secondary input to output unchanged. If secondary input is not connected it uses zero pixels instead. This can be used eg to be able to blend into a buffer with 1,2,4 or 18 bits per pixel where the addresses of the leftmost or rightmost pixel are not aligned to a full byte. The background can then be copied through the blitblend unit unchanged for those pixels. */
#define GFXREG_BLITBLEND_NEUTRALBORDER 0x00000008U
/* NEUTRALBORDERMODE: Chooses whether to bypass primary or secondary input pixels */
#define GFXREG_BLITBLEND_NEUTRALBORDER_NEUTRALBORDERMODE_FSHIFT 0U
#define GFXREG_BLITBLEND_NEUTRALBORDER_NEUTRALBORDERMODE_FMASK 0x1U
#define GFXREG_BLITBLEND_NEUTRALBORDER_SETM_NEUTRALBORDERMODE(val) (((CYGFX_U32)(val) & 0x1UL) )
#define GFXREG_BLITBLEND_NEUTRALBORDER_SET_NEUTRALBORDERMODE(val) (((CYGFX_U32)(val) ) | GCCGFX_GEN_ASSERT_FIELD_ACCESS(val, 0x1UL, __FILE__, __LINE__))
#define GFXREG_BLITBLEND_NEUTRALBORDER_GET_NEUTRALBORDERMODE(val) (((CYGFX_U32)(val) ) & 0x1UL)
#define GFXREG_BLITBLEND_SETM_NEUTRALBORDERMODE(s,val) ( (s)->neutralborder = ((s)->neutralborder & ~0x1UL) | (((CYGFX_U32)(val) ) & 0x1UL) )
#define GFXREG_BLITBLEND_SET_NEUTRALBORDERMODE(s,val)  ( (s)->neutralborder = (((s)->neutralborder & ~0x1UL) | ((CYGFX_U32)(val) ) ) | GCCGFX_GEN_ASSERT_FIELD_ACCESS(val, 0x1UL, __FILE__, __LINE__) )
#define GFXREG_BLITBLEND_GET_NEUTRALBORDERMODE(s) ((((s)->neutralborder) ) & 0x1UL)
#define GFXREG_BLITBLEND_NEUTRALBORDER_NEUTRALBORDERMODE_PRIMARY 0x0U /* Bypasses primary pixel */
#define GFXREG_BLITBLEND_NEUTRALBORDER_NEUTRALBORDERMODE_SECONDARY 0x1U /* Bypasses secondary pixel */
#define GFXREG_BLITBLEND_NEUTRALBORDER_NEUTRALBORDERMODE_RESET 0U

/* NEUTRALBORDERLEFT: Number of neutral left border pixels */
#define GFXREG_BLITBLEND_NEUTRALBORDER_NEUTRALBORDERLEFT_FSHIFT 8U
#define GFXREG_BLITBLEND_NEUTRALBORDER_NEUTRALBORDERLEFT_FMASK 0x7U
#define GFXREG_BLITBLEND_NEUTRALBORDER_SETM_NEUTRALBORDERLEFT(val) (((CYGFX_U32)(val) & 0x7UL) << 8U)
#define GFXREG_BLITBLEND_NEUTRALBORDER_SET_NEUTRALBORDERLEFT(val) (((CYGFX_U32)(val) << 8U) | GCCGFX_GEN_ASSERT_FIELD_ACCESS(val, 0x7UL, __FILE__, __LINE__))
#define GFXREG_BLITBLEND_NEUTRALBORDER_GET_NEUTRALBORDERLEFT(val) (((CYGFX_U32)(val) >> 8U) & 0x7UL)
#define GFXREG_BLITBLEND_SETM_NEUTRALBORDERLEFT(s,val) ( (s)->neutralborder = ((s)->neutralborder & ~0x700UL) | (((CYGFX_U32)(val) << 8U) & 0x700UL) )
#define GFXREG_BLITBLEND_SET_NEUTRALBORDERLEFT(s,val)  ( (s)->neutralborder = (((s)->neutralborder & ~0x700UL) | ((CYGFX_U32)(val) << 8U) ) | GCCGFX_GEN_ASSERT_FIELD_ACCESS(val, 0x7UL, __FILE__, __LINE__) )
#define GFXREG_BLITBLEND_GET_NEUTRALBORDERLEFT(s) ((((s)->neutralborder) >> 8U) & 0x7UL)
#define GFXREG_BLITBLEND_NEUTRALBORDER_NEUTRALBORDERLEFT_RESET 0U

/* NEUTRALBORDERRIGHT: Number of neutral right border pixels */
#define GFXREG_BLITBLEND_NEUTRALBORDER_NEUTRALBORDERRIGHT_FSHIFT 12U
#define GFXREG_BLITBLEND_NEUTRALBORDER_NEUTRALBORDERRIGHT_FMASK 0x7U
#define GFXREG_BLITBLEND_NEUTRALBORDER_SETM_NEUTRALBORDERRIGHT(val) (((CYGFX_U32)(val) & 0x7UL) << 12U)
#define GFXREG_BLITBLEND_NEUTRALBORDER_SET_NEUTRALBORDERRIGHT(val) (((CYGFX_U32)(val) << 12U) | GCCGFX_GEN_ASSERT_FIELD_ACCESS(val, 0x7UL, __FILE__, __LINE__))
#define GFXREG_BLITBLEND_NEUTRALBORDER_GET_NEUTRALBORDERRIGHT(val) (((CYGFX_U32)(val) >> 12U) & 0x7UL)
#define GFXREG_BLITBLEND_SETM_NEUTRALBORDERRIGHT(s,val) ( (s)->neutralborder = ((s)->neutralborder & ~0x7000UL) | (((CYGFX_U32)(val) << 12U) & 0x7000UL) )
#define GFXREG_BLITBLEND_SET_NEUTRALBORDERRIGHT(s,val)  ( (s)->neutralborder = (((s)->neutralborder & ~0x7000UL) | ((CYGFX_U32)(val) << 12U) ) | GCCGFX_GEN_ASSERT_FIELD_ACCESS(val, 0x7UL, __FILE__, __LINE__) )
#define GFXREG_BLITBLEND_GET_NEUTRALBORDERRIGHT(s) ((((s)->neutralborder) >> 12U) & 0x7UL)
#define GFXREG_BLITBLEND_NEUTRALBORDER_NEUTRALBORDERRIGHT_RESET 0U

/* CONSTANTCOLOR: Constant color register
   Constant color settings for blend operations. */
#define GFXREG_BLITBLEND_CONSTANTCOLOR 0x0000000cU
/* CONSTANTALPHA: Alpha. */
#define GFXREG_BLITBLEND_CONSTANTCOLOR_CONSTANTALPHA_FSHIFT 0U
#define GFXREG_BLITBLEND_CONSTANTCOLOR_CONSTANTALPHA_FMASK 0xffU
#define GFXREG_BLITBLEND_CONSTANTCOLOR_SETM_CONSTANTALPHA(val) (((CYGFX_U32)(val) & 0xffUL) )
#define GFXREG_BLITBLEND_CONSTANTCOLOR_SET_CONSTANTALPHA(val) (((CYGFX_U32)(val) ) | GCCGFX_GEN_ASSERT_FIELD_ACCESS(val, 0xffUL, __FILE__, __LINE__))
#define GFXREG_BLITBLEND_CONSTANTCOLOR_GET_CONSTANTALPHA(val) (((CYGFX_U32)(val) ) & 0xffUL)
#define GFXREG_BLITBLEND_SETM_CONSTANTALPHA(s,val) ( (s)->constantcolor = ((s)->constantcolor & ~0xffUL) | (((CYGFX_U32)(val) ) & 0xffUL) )
#define GFXREG_BLITBLEND_SET_CONSTANTALPHA(s,val)  ( (s)->constantcolor = (((s)->constantcolor & ~0xffUL) | ((CYGFX_U32)(val) ) ) | GCCGFX_GEN_ASSERT_FIELD_ACCESS(val, 0xffUL, __FILE__, __LINE__) )
#define GFXREG_BLITBLEND_GET_CONSTANTALPHA(s) ((((s)->constantcolor) ) & 0xffUL)
#define GFXREG_BLITBLEND_CONSTANTCOLOR_CONSTANTALPHA_RESET 0U

/* CONSTANTBLUE: Blue and V (chroma). */
#define GFXREG_BLITBLEND_CONSTANTCOLOR_CONSTANTBLUE_FSHIFT 8U
#define GFXREG_BLITBLEND_CONSTANTCOLOR_CONSTANTBLUE_FMASK 0xffU
#define GFXREG_BLITBLEND_CONSTANTCOLOR_SETM_CONSTANTBLUE(val) (((CYGFX_U32)(val) & 0xffUL) << 8U)
#define GFXREG_BLITBLEND_CONSTANTCOLOR_SET_CONSTANTBLUE(val) (((CYGFX_U32)(val) << 8U) | GCCGFX_GEN_ASSERT_FIELD_ACCESS(val, 0xffUL, __FILE__, __LINE__))
#define GFXREG_BLITBLEND_CONSTANTCOLOR_GET_CONSTANTBLUE(val) (((CYGFX_U32)(val) >> 8U) & 0xffUL)
#define GFXREG_BLITBLEND_SETM_CONSTANTBLUE(s,val) ( (s)->constantcolor = ((s)->constantcolor & ~0xff00UL) | (((CYGFX_U32)(val) << 8U) & 0xff00UL) )
#define GFXREG_BLITBLEND_SET_CONSTANTBLUE(s,val)  ( (s)->constantcolor = (((s)->constantcolor & ~0xff00UL) | ((CYGFX_U32)(val) << 8U) ) | GCCGFX_GEN_ASSERT_FIELD_ACCESS(val, 0xffUL, __FILE__, __LINE__) )
#define GFXREG_BLITBLEND_GET_CONSTANTBLUE(s) ((((s)->constantcolor) >> 8U) & 0xffUL)
#define GFXREG_BLITBLEND_CONSTANTCOLOR_CONSTANTBLUE_RESET 0U

/* CONSTANTGREEN: Green and U (chroma). */
#define GFXREG_BLITBLEND_CONSTANTCOLOR_CONSTANTGREEN_FSHIFT 16U
#define GFXREG_BLITBLEND_CONSTANTCOLOR_CONSTANTGREEN_FMASK 0xffU
#define GFXREG_BLITBLEND_CONSTANTCOLOR_SETM_CONSTANTGREEN(val) (((CYGFX_U32)(val) & 0xffUL) << 16U)
#define GFXREG_BLITBLEND_CONSTANTCOLOR_SET_CONSTANTGREEN(val) (((CYGFX_U32)(val) << 16U) | GCCGFX_GEN_ASSERT_FIELD_ACCESS(val, 0xffUL, __FILE__, __LINE__))
#define GFXREG_BLITBLEND_CONSTANTCOLOR_GET_CONSTANTGREEN(val) (((CYGFX_U32)(val) >> 16U) & 0xffUL)
#define GFXREG_BLITBLEND_SETM_CONSTANTGREEN(s,val) ( (s)->constantcolor = ((s)->constantcolor & ~0xff0000UL) | (((CYGFX_U32)(val) << 16U) & 0xff0000UL) )
#define GFXREG_BLITBLEND_SET_CONSTANTGREEN(s,val)  ( (s)->constantcolor = (((s)->constantcolor & ~0xff0000UL) | ((CYGFX_U32)(val) << 16U) ) | GCCGFX_GEN_ASSERT_FIELD_ACCESS(val, 0xffUL, __FILE__, __LINE__) )
#define GFXREG_BLITBLEND_GET_CONSTANTGREEN(s) ((((s)->constantcolor) >> 16U) & 0xffUL)
#define GFXREG_BLITBLEND_CONSTANTCOLOR_CONSTANTGREEN_RESET 0U

/* CONSTANTRED: Red and Y (luma). */
#define GFXREG_BLITBLEND_CONSTANTCOLOR_CONSTANTRED_FSHIFT 24U
#define GFXREG_BLITBLEND_CONSTANTCOLOR_CONSTANTRED_FMASK 0xffU
#define GFXREG_BLITBLEND_CONSTANTCOLOR_SETM_CONSTANTRED(val) (((CYGFX_U32)(val) & 0xffUL) << 24U)
#define GFXREG_BLITBLEND_CONSTANTCOLOR_SET_CONSTANTRED(val) (((CYGFX_U32)(val) << 24U) | GCCGFX_GEN_ASSERT_FIELD_ACCESS(val, 0xffUL, __FILE__, __LINE__))
#define GFXREG_BLITBLEND_CONSTANTCOLOR_GET_CONSTANTRED(val) (((CYGFX_U32)(val) >> 24U) & 0xffUL)
#define GFXREG_BLITBLEND_SETM_CONSTANTRED(s,val) ( (s)->constantcolor = ((s)->constantcolor & ~0xff000000UL) | (((CYGFX_U32)(val) << 24U) & 0xff000000UL) )
#define GFXREG_BLITBLEND_SET_CONSTANTRED(s,val)  ( (s)->constantcolor = (((s)->constantcolor & ~0xff000000UL) | ((CYGFX_U32)(val) << 24U) ) | GCCGFX_GEN_ASSERT_FIELD_ACCESS(val, 0xffUL, __FILE__, __LINE__) )
#define GFXREG_BLITBLEND_GET_CONSTANTRED(s) ((((s)->constantcolor) >> 24U) & 0xffUL)
#define GFXREG_BLITBLEND_CONSTANTCOLOR_CONSTANTRED_RESET 0U

/* COLORREDBLENDFUNCTION: Open GL RGB blending factors */
#define GFXREG_BLITBLEND_COLORREDBLENDFUNCTION 0x00000010U
/* BLENDFUNCCOLORREDSRC: Red component source blend function */
#define GFXREG_BLITBLEND_COLORREDBLENDFUNCTION_BLENDFUNCCOLORREDSRC_FSHIFT 0U
#define GFXREG_BLITBLEND_COLORREDBLENDFUNCTION_BLENDFUNCCOLORREDSRC_FMASK 0xffffU
#define GFXREG_BLITBLEND_COLORREDBLENDFUNCTION_SETM_BLENDFUNCCOLORREDSRC(val) (((CYGFX_U32)(val) & 0xffffUL) )
#define GFXREG_BLITBLEND_COLORREDBLENDFUNCTION_SET_BLENDFUNCCOLORREDSRC(val) (((CYGFX_U32)(val) ) | GCCGFX_GEN_ASSERT_FIELD_ACCESS(val, 0xffffUL, __FILE__, __LINE__))
#define GFXREG_BLITBLEND_COLORREDBLENDFUNCTION_GET_BLENDFUNCCOLORREDSRC(val) (((CYGFX_U32)(val) ) & 0xffffUL)
#define GFXREG_BLITBLEND_SETM_BLENDFUNCCOLORREDSRC(s,val) ( (s)->colorredblendfunction = ((s)->colorredblendfunction & ~0xffffUL) | (((CYGFX_U32)(val) ) & 0xffffUL) )
#define GFXREG_BLITBLEND_SET_BLENDFUNCCOLORREDSRC(s,val)  ( (s)->colorredblendfunction = (((s)->colorredblendfunction & ~0xffffUL) | ((CYGFX_U32)(val) ) ) | GCCGFX_GEN_ASSERT_FIELD_ACCESS(val, 0xffffUL, __FILE__, __LINE__) )
#define GFXREG_BLITBLEND_GET_BLENDFUNCCOLORREDSRC(s) ((((s)->colorredblendfunction) ) & 0xffffUL)
#define GFXREG_BLITBLEND_COLORREDBLENDFUNCTION_BLENDFUNCCOLORREDSRC_GL_ZERO 0U /*  */
#define GFXREG_BLITBLEND_COLORREDBLENDFUNCTION_BLENDFUNCCOLORREDSRC_GL_ONE 1U /*  */
#define GFXREG_BLITBLEND_COLORREDBLENDFUNCTION_BLENDFUNCCOLORREDSRC_GL_SRC_COLOR 0x0300U /*  */
#define GFXREG_BLITBLEND_COLORREDBLENDFUNCTION_BLENDFUNCCOLORREDSRC_GL_ONE_MINUS_SRC_COLOR 0x0301U /*  */
#define GFXREG_BLITBLEND_COLORREDBLENDFUNCTION_BLENDFUNCCOLORREDSRC_GL_SRC_ALPHA 0x0302U /*  */
#define GFXREG_BLITBLEND_COLORREDBLENDFUNCTION_BLENDFUNCCOLORREDSRC_GL_ONE_MINUS_SRC_ALPHA 0x0303U /*  */
#define GFXREG_BLITBLEND_COLORREDBLENDFUNCTION_BLENDFUNCCOLORREDSRC_GL_DST_ALPHA 0x0304U /*  */
#define GFXREG_BLITBLEND_COLORREDBLENDFUNCTION_BLENDFUNCCOLORREDSRC_GL_ONE_MINUS_DST_ALPHA 0x0305U /*  */
#define GFXREG_BLITBLEND_COLORREDBLENDFUNCTION_BLENDFUNCCOLORREDSRC_GL_DST_COLOR 0x0306U /*  */
#define GFXREG_BLITBLEND_COLORREDBLENDFUNCTION_BLENDFUNCCOLORREDSRC_GL_ONE_MINUS_DST_COLOR 0x0307U /*  */
#define GFXREG_BLITBLEND_COLORREDBLENDFUNCTION_BLENDFUNCCOLORREDSRC_GL_SRC_ALPHA_SATURATE 0x0308U /*  */
#define GFXREG_BLITBLEND_COLORREDBLENDFUNCTION_BLENDFUNCCOLORREDSRC_GL_CONSTANT_COLOR 0x8001U /*  */
#define GFXREG_BLITBLEND_COLORREDBLENDFUNCTION_BLENDFUNCCOLORREDSRC_GL_ONE_MINUS_CONSTANT_COLOR 0x8002U /*  */
#define GFXREG_BLITBLEND_COLORREDBLENDFUNCTION_BLENDFUNCCOLORREDSRC_GL_CONSTANT_ALPHA 0x8003U /*  */
#define GFXREG_BLITBLEND_COLORREDBLENDFUNCTION_BLENDFUNCCOLORREDSRC_GL_ONE_MINUS_CONSTANT_ALPHA 0x8004U /*  */
#define GFXREG_BLITBLEND_COLORREDBLENDFUNCTION_BLENDFUNCCOLORREDSRC_RESET 0x0300U

/* BLENDFUNCCOLORREDDST: Red component destination blend function */
#define GFXREG_BLITBLEND_COLORREDBLENDFUNCTION_BLENDFUNCCOLORREDDST_FSHIFT 16U
#define GFXREG_BLITBLEND_COLORREDBLENDFUNCTION_BLENDFUNCCOLORREDDST_FMASK 0xffffU
#define GFXREG_BLITBLEND_COLORREDBLENDFUNCTION_SETM_BLENDFUNCCOLORREDDST(val) (((CYGFX_U32)(val) & 0xffffUL) << 16U)
#define GFXREG_BLITBLEND_COLORREDBLENDFUNCTION_SET_BLENDFUNCCOLORREDDST(val) (((CYGFX_U32)(val) << 16U) | GCCGFX_GEN_ASSERT_FIELD_ACCESS(val, 0xffffUL, __FILE__, __LINE__))
#define GFXREG_BLITBLEND_COLORREDBLENDFUNCTION_GET_BLENDFUNCCOLORREDDST(val) (((CYGFX_U32)(val) >> 16U) & 0xffffUL)
#define GFXREG_BLITBLEND_SETM_BLENDFUNCCOLORREDDST(s,val) ( (s)->colorredblendfunction = ((s)->colorredblendfunction & ~0xffff0000UL) | (((CYGFX_U32)(val) << 16U) & 0xffff0000UL) )
#define GFXREG_BLITBLEND_SET_BLENDFUNCCOLORREDDST(s,val)  ( (s)->colorredblendfunction = (((s)->colorredblendfunction & ~0xffff0000UL) | ((CYGFX_U32)(val) << 16U) ) | GCCGFX_GEN_ASSERT_FIELD_ACCESS(val, 0xffffUL, __FILE__, __LINE__) )
#define GFXREG_BLITBLEND_GET_BLENDFUNCCOLORREDDST(s) ((((s)->colorredblendfunction) >> 16U) & 0xffffUL)
#define GFXREG_BLITBLEND_COLORREDBLENDFUNCTION_BLENDFUNCCOLORREDDST_GL_ZERO 0U /*  */
#define GFXREG_BLITBLEND_COLORREDBLENDFUNCTION_BLENDFUNCCOLORREDDST_GL_ONE 1U /*  */
#define GFXREG_BLITBLEND_COLORREDBLENDFUNCTION_BLENDFUNCCOLORREDDST_GL_SRC_COLOR 0x0300U /*  */
#define GFXREG_BLITBLEND_COLORREDBLENDFUNCTION_BLENDFUNCCOLORREDDST_GL_ONE_MINUS_SRC_COLOR 0x0301U /*  */
#define GFXREG_BLITBLEND_COLORREDBLENDFUNCTION_BLENDFUNCCOLORREDDST_GL_SRC_ALPHA 0x0302U /*  */
#define GFXREG_BLITBLEND_COLORREDBLENDFUNCTION_BLENDFUNCCOLORREDDST_GL_ONE_MINUS_SRC_ALPHA 0x0303U /*  */
#define GFXREG_BLITBLEND_COLORREDBLENDFUNCTION_BLENDFUNCCOLORREDDST_GL_DST_ALPHA 0x0304U /*  */
#define GFXREG_BLITBLEND_COLORREDBLENDFUNCTION_BLENDFUNCCOLORREDDST_GL_ONE_MINUS_DST_ALPHA 0x0305U /*  */
#define GFXREG_BLITBLEND_COLORREDBLENDFUNCTION_BLENDFUNCCOLORREDDST_GL_DST_COLOR 0x0306U /*  */
#define GFXREG_BLITBLEND_COLORREDBLENDFUNCTION_BLENDFUNCCOLORREDDST_GL_ONE_MINUS_DST_COLOR 0x0307U /*  */
#define GFXREG_BLITBLEND_COLORREDBLENDFUNCTION_BLENDFUNCCOLORREDDST_GL_SRC_ALPHA_SATURATE 0x0308U /*  */
#define GFXREG_BLITBLEND_COLORREDBLENDFUNCTION_BLENDFUNCCOLORREDDST_GL_CONSTANT_COLOR 0x8001U /*  */
#define GFXREG_BLITBLEND_COLORREDBLENDFUNCTION_BLENDFUNCCOLORREDDST_GL_ONE_MINUS_CONSTANT_COLOR 0x8002U /*  */
#define GFXREG_BLITBLEND_COLORREDBLENDFUNCTION_BLENDFUNCCOLORREDDST_GL_CONSTANT_ALPHA 0x8003U /*  */
#define GFXREG_BLITBLEND_COLORREDBLENDFUNCTION_BLENDFUNCCOLORREDDST_GL_ONE_MINUS_CONSTANT_ALPHA 0x8004U /*  */
#define GFXREG_BLITBLEND_COLORREDBLENDFUNCTION_BLENDFUNCCOLORREDDST_RESET 0x0300U

/* COLORGREENBLENDFUNCTION: Open GL RGB blending factors */
#define GFXREG_BLITBLEND_COLORGREENBLENDFUNCTION 0x00000014U
/* BLENDFUNCCOLORGREENSRC: Green component source blend function */
#define GFXREG_BLITBLEND_COLORGREENBLENDFUNCTION_BLENDFUNCCOLORGREENSRC_FSHIFT 0U
#define GFXREG_BLITBLEND_COLORGREENBLENDFUNCTION_BLENDFUNCCOLORGREENSRC_FMASK 0xffffU
#define GFXREG_BLITBLEND_COLORGREENBLENDFUNCTION_SETM_BLENDFUNCCOLORGREENSRC(val) (((CYGFX_U32)(val) & 0xffffUL) )
#define GFXREG_BLITBLEND_COLORGREENBLENDFUNCTION_SET_BLENDFUNCCOLORGREENSRC(val) (((CYGFX_U32)(val) ) | GCCGFX_GEN_ASSERT_FIELD_ACCESS(val, 0xffffUL, __FILE__, __LINE__))
#define GFXREG_BLITBLEND_COLORGREENBLENDFUNCTION_GET_BLENDFUNCCOLORGREENSRC(val) (((CYGFX_U32)(val) ) & 0xffffUL)
#define GFXREG_BLITBLEND_SETM_BLENDFUNCCOLORGREENSRC(s,val) ( (s)->colorgreenblendfunction = ((s)->colorgreenblendfunction & ~0xffffUL) | (((CYGFX_U32)(val) ) & 0xffffUL) )
#define GFXREG_BLITBLEND_SET_BLENDFUNCCOLORGREENSRC(s,val)  ( (s)->colorgreenblendfunction = (((s)->colorgreenblendfunction & ~0xffffUL) | ((CYGFX_U32)(val) ) ) | GCCGFX_GEN_ASSERT_FIELD_ACCESS(val, 0xffffUL, __FILE__, __LINE__) )
#define GFXREG_BLITBLEND_GET_BLENDFUNCCOLORGREENSRC(s) ((((s)->colorgreenblendfunction) ) & 0xffffUL)
#define GFXREG_BLITBLEND_COLORGREENBLENDFUNCTION_BLENDFUNCCOLORGREENSRC_GL_ZERO 0U /*  */
#define GFXREG_BLITBLEND_COLORGREENBLENDFUNCTION_BLENDFUNCCOLORGREENSRC_GL_ONE 1U /*  */
#define GFXREG_BLITBLEND_COLORGREENBLENDFUNCTION_BLENDFUNCCOLORGREENSRC_GL_SRC_COLOR 0x0300U /*  */
#define GFXREG_BLITBLEND_COLORGREENBLENDFUNCTION_BLENDFUNCCOLORGREENSRC_GL_ONE_MINUS_SRC_COLOR 0x0301U /*  */
#define GFXREG_BLITBLEND_COLORGREENBLENDFUNCTION_BLENDFUNCCOLORGREENSRC_GL_SRC_ALPHA 0x0302U /*  */
#define GFXREG_BLITBLEND_COLORGREENBLENDFUNCTION_BLENDFUNCCOLORGREENSRC_GL_ONE_MINUS_SRC_ALPHA 0x0303U /*  */
#define GFXREG_BLITBLEND_COLORGREENBLENDFUNCTION_BLENDFUNCCOLORGREENSRC_GL_DST_ALPHA 0x0304U /*  */
#define GFXREG_BLITBLEND_COLORGREENBLENDFUNCTION_BLENDFUNCCOLORGREENSRC_GL_ONE_MINUS_DST_ALPHA 0x0305U /*  */
#define GFXREG_BLITBLEND_COLORGREENBLENDFUNCTION_BLENDFUNCCOLORGREENSRC_GL_DST_COLOR 0x0306U /*  */
#define GFXREG_BLITBLEND_COLORGREENBLENDFUNCTION_BLENDFUNCCOLORGREENSRC_GL_ONE_MINUS_DST_COLOR 0x0307U /*  */
#define GFXREG_BLITBLEND_COLORGREENBLENDFUNCTION_BLENDFUNCCOLORGREENSRC_GL_SRC_ALPHA_SATURATE 0x0308U /*  */
#define GFXREG_BLITBLEND_COLORGREENBLENDFUNCTION_BLENDFUNCCOLORGREENSRC_GL_CONSTANT_COLOR 0x8001U /*  */
#define GFXREG_BLITBLEND_COLORGREENBLENDFUNCTION_BLENDFUNCCOLORGREENSRC_GL_ONE_MINUS_CONSTANT_COLOR 0x8002U /*  */
#define GFXREG_BLITBLEND_COLORGREENBLENDFUNCTION_BLENDFUNCCOLORGREENSRC_GL_CONSTANT_ALPHA 0x8003U /*  */
#define GFXREG_BLITBLEND_COLORGREENBLENDFUNCTION_BLENDFUNCCOLORGREENSRC_GL_ONE_MINUS_CONSTANT_ALPHA 0x8004U /*  */
#define GFXREG_BLITBLEND_COLORGREENBLENDFUNCTION_BLENDFUNCCOLORGREENSRC_RESET 0x0300U

/* BLENDFUNCCOLORGREENDST: Green component destination blend function */
#define GFXREG_BLITBLEND_COLORGREENBLENDFUNCTION_BLENDFUNCCOLORGREENDST_FSHIFT 16U
#define GFXREG_BLITBLEND_COLORGREENBLENDFUNCTION_BLENDFUNCCOLORGREENDST_FMASK 0xffffU
#define GFXREG_BLITBLEND_COLORGREENBLENDFUNCTION_SETM_BLENDFUNCCOLORGREENDST(val) (((CYGFX_U32)(val) & 0xffffUL) << 16U)
#define GFXREG_BLITBLEND_COLORGREENBLENDFUNCTION_SET_BLENDFUNCCOLORGREENDST(val) (((CYGFX_U32)(val) << 16U) | GCCGFX_GEN_ASSERT_FIELD_ACCESS(val, 0xffffUL, __FILE__, __LINE__))
#define GFXREG_BLITBLEND_COLORGREENBLENDFUNCTION_GET_BLENDFUNCCOLORGREENDST(val) (((CYGFX_U32)(val) >> 16U) & 0xffffUL)
#define GFXREG_BLITBLEND_SETM_BLENDFUNCCOLORGREENDST(s,val) ( (s)->colorgreenblendfunction = ((s)->colorgreenblendfunction & ~0xffff0000UL) | (((CYGFX_U32)(val) << 16U) & 0xffff0000UL) )
#define GFXREG_BLITBLEND_SET_BLENDFUNCCOLORGREENDST(s,val)  ( (s)->colorgreenblendfunction = (((s)->colorgreenblendfunction & ~0xffff0000UL) | ((CYGFX_U32)(val) << 16U) ) | GCCGFX_GEN_ASSERT_FIELD_ACCESS(val, 0xffffUL, __FILE__, __LINE__) )
#define GFXREG_BLITBLEND_GET_BLENDFUNCCOLORGREENDST(s) ((((s)->colorgreenblendfunction) >> 16U) & 0xffffUL)
#define GFXREG_BLITBLEND_COLORGREENBLENDFUNCTION_BLENDFUNCCOLORGREENDST_GL_ZERO 0U /*  */
#define GFXREG_BLITBLEND_COLORGREENBLENDFUNCTION_BLENDFUNCCOLORGREENDST_GL_ONE 1U /*  */
#define GFXREG_BLITBLEND_COLORGREENBLENDFUNCTION_BLENDFUNCCOLORGREENDST_GL_SRC_COLOR 0x0300U /*  */
#define GFXREG_BLITBLEND_COLORGREENBLENDFUNCTION_BLENDFUNCCOLORGREENDST_GL_ONE_MINUS_SRC_COLOR 0x0301U /*  */
#define GFXREG_BLITBLEND_COLORGREENBLENDFUNCTION_BLENDFUNCCOLORGREENDST_GL_SRC_ALPHA 0x0302U /*  */
#define GFXREG_BLITBLEND_COLORGREENBLENDFUNCTION_BLENDFUNCCOLORGREENDST_GL_ONE_MINUS_SRC_ALPHA 0x0303U /*  */
#define GFXREG_BLITBLEND_COLORGREENBLENDFUNCTION_BLENDFUNCCOLORGREENDST_GL_DST_ALPHA 0x0304U /*  */
#define GFXREG_BLITBLEND_COLORGREENBLENDFUNCTION_BLENDFUNCCOLORGREENDST_GL_ONE_MINUS_DST_ALPHA 0x0305U /*  */
#define GFXREG_BLITBLEND_COLORGREENBLENDFUNCTION_BLENDFUNCCOLORGREENDST_GL_DST_COLOR 0x0306U /*  */
#define GFXREG_BLITBLEND_COLORGREENBLENDFUNCTION_BLENDFUNCCOLORGREENDST_GL_ONE_MINUS_DST_COLOR 0x0307U /*  */
#define GFXREG_BLITBLEND_COLORGREENBLENDFUNCTION_BLENDFUNCCOLORGREENDST_GL_SRC_ALPHA_SATURATE 0x0308U /*  */
#define GFXREG_BLITBLEND_COLORGREENBLENDFUNCTION_BLENDFUNCCOLORGREENDST_GL_CONSTANT_COLOR 0x8001U /*  */
#define GFXREG_BLITBLEND_COLORGREENBLENDFUNCTION_BLENDFUNCCOLORGREENDST_GL_ONE_MINUS_CONSTANT_COLOR 0x8002U /*  */
#define GFXREG_BLITBLEND_COLORGREENBLENDFUNCTION_BLENDFUNCCOLORGREENDST_GL_CONSTANT_ALPHA 0x8003U /*  */
#define GFXREG_BLITBLEND_COLORGREENBLENDFUNCTION_BLENDFUNCCOLORGREENDST_GL_ONE_MINUS_CONSTANT_ALPHA 0x8004U /*  */
#define GFXREG_BLITBLEND_COLORGREENBLENDFUNCTION_BLENDFUNCCOLORGREENDST_RESET 0x0300U

/* COLORBLUEBLENDFUNCTION: Open GL RGB blending factors */
#define GFXREG_BLITBLEND_COLORBLUEBLENDFUNCTION 0x00000018U
/* BLENDFUNCCOLORBLUESRC: Blue component source blend function */
#define GFXREG_BLITBLEND_COLORBLUEBLENDFUNCTION_BLENDFUNCCOLORBLUESRC_FSHIFT 0U
#define GFXREG_BLITBLEND_COLORBLUEBLENDFUNCTION_BLENDFUNCCOLORBLUESRC_FMASK 0xffffU
#define GFXREG_BLITBLEND_COLORBLUEBLENDFUNCTION_SETM_BLENDFUNCCOLORBLUESRC(val) (((CYGFX_U32)(val) & 0xffffUL) )
#define GFXREG_BLITBLEND_COLORBLUEBLENDFUNCTION_SET_BLENDFUNCCOLORBLUESRC(val) (((CYGFX_U32)(val) ) | GCCGFX_GEN_ASSERT_FIELD_ACCESS(val, 0xffffUL, __FILE__, __LINE__))
#define GFXREG_BLITBLEND_COLORBLUEBLENDFUNCTION_GET_BLENDFUNCCOLORBLUESRC(val) (((CYGFX_U32)(val) ) & 0xffffUL)
#define GFXREG_BLITBLEND_SETM_BLENDFUNCCOLORBLUESRC(s,val) ( (s)->colorblueblendfunction = ((s)->colorblueblendfunction & ~0xffffUL) | (((CYGFX_U32)(val) ) & 0xffffUL) )
#define GFXREG_BLITBLEND_SET_BLENDFUNCCOLORBLUESRC(s,val)  ( (s)->colorblueblendfunction = (((s)->colorblueblendfunction & ~0xffffUL) | ((CYGFX_U32)(val) ) ) | GCCGFX_GEN_ASSERT_FIELD_ACCESS(val, 0xffffUL, __FILE__, __LINE__) )
#define GFXREG_BLITBLEND_GET_BLENDFUNCCOLORBLUESRC(s) ((((s)->colorblueblendfunction) ) & 0xffffUL)
#define GFXREG_BLITBLEND_COLORBLUEBLENDFUNCTION_BLENDFUNCCOLORBLUESRC_GL_ZERO 0U /*  */
#define GFXREG_BLITBLEND_COLORBLUEBLENDFUNCTION_BLENDFUNCCOLORBLUESRC_GL_ONE 1U /*  */
#define GFXREG_BLITBLEND_COLORBLUEBLENDFUNCTION_BLENDFUNCCOLORBLUESRC_GL_SRC_COLOR 0x0300U /*  */
#define GFXREG_BLITBLEND_COLORBLUEBLENDFUNCTION_BLENDFUNCCOLORBLUESRC_GL_ONE_MINUS_SRC_COLOR 0x0301U /*  */
#define GFXREG_BLITBLEND_COLORBLUEBLENDFUNCTION_BLENDFUNCCOLORBLUESRC_GL_SRC_ALPHA 0x0302U /*  */
#define GFXREG_BLITBLEND_COLORBLUEBLENDFUNCTION_BLENDFUNCCOLORBLUESRC_GL_ONE_MINUS_SRC_ALPHA 0x0303U /*  */
#define GFXREG_BLITBLEND_COLORBLUEBLENDFUNCTION_BLENDFUNCCOLORBLUESRC_GL_DST_ALPHA 0x0304U /*  */
#define GFXREG_BLITBLEND_COLORBLUEBLENDFUNCTION_BLENDFUNCCOLORBLUESRC_GL_ONE_MINUS_DST_ALPHA 0x0305U /*  */
#define GFXREG_BLITBLEND_COLORBLUEBLENDFUNCTION_BLENDFUNCCOLORBLUESRC_GL_DST_COLOR 0x0306U /*  */
#define GFXREG_BLITBLEND_COLORBLUEBLENDFUNCTION_BLENDFUNCCOLORBLUESRC_GL_ONE_MINUS_DST_COLOR 0x0307U /*  */
#define GFXREG_BLITBLEND_COLORBLUEBLENDFUNCTION_BLENDFUNCCOLORBLUESRC_GL_SRC_ALPHA_SATURATE 0x0308U /*  */
#define GFXREG_BLITBLEND_COLORBLUEBLENDFUNCTION_BLENDFUNCCOLORBLUESRC_GL_CONSTANT_COLOR 0x8001U /*  */
#define GFXREG_BLITBLEND_COLORBLUEBLENDFUNCTION_BLENDFUNCCOLORBLUESRC_GL_ONE_MINUS_CONSTANT_COLOR 0x8002U /*  */
#define GFXREG_BLITBLEND_COLORBLUEBLENDFUNCTION_BLENDFUNCCOLORBLUESRC_GL_CONSTANT_ALPHA 0x8003U /*  */
#define GFXREG_BLITBLEND_COLORBLUEBLENDFUNCTION_BLENDFUNCCOLORBLUESRC_GL_ONE_MINUS_CONSTANT_ALPHA 0x8004U /*  */
#define GFXREG_BLITBLEND_COLORBLUEBLENDFUNCTION_BLENDFUNCCOLORBLUESRC_RESET 0x0300U

/* BLENDFUNCCOLORBLUEDST: Blue component destination blend function */
#define GFXREG_BLITBLEND_COLORBLUEBLENDFUNCTION_BLENDFUNCCOLORBLUEDST_FSHIFT 16U
#define GFXREG_BLITBLEND_COLORBLUEBLENDFUNCTION_BLENDFUNCCOLORBLUEDST_FMASK 0xffffU
#define GFXREG_BLITBLEND_COLORBLUEBLENDFUNCTION_SETM_BLENDFUNCCOLORBLUEDST(val) (((CYGFX_U32)(val) & 0xffffUL) << 16U)
#define GFXREG_BLITBLEND_COLORBLUEBLENDFUNCTION_SET_BLENDFUNCCOLORBLUEDST(val) (((CYGFX_U32)(val) << 16U) | GCCGFX_GEN_ASSERT_FIELD_ACCESS(val, 0xffffUL, __FILE__, __LINE__))
#define GFXREG_BLITBLEND_COLORBLUEBLENDFUNCTION_GET_BLENDFUNCCOLORBLUEDST(val) (((CYGFX_U32)(val) >> 16U) & 0xffffUL)
#define GFXREG_BLITBLEND_SETM_BLENDFUNCCOLORBLUEDST(s,val) ( (s)->colorblueblendfunction = ((s)->colorblueblendfunction & ~0xffff0000UL) | (((CYGFX_U32)(val) << 16U) & 0xffff0000UL) )
#define GFXREG_BLITBLEND_SET_BLENDFUNCCOLORBLUEDST(s,val)  ( (s)->colorblueblendfunction = (((s)->colorblueblendfunction & ~0xffff0000UL) | ((CYGFX_U32)(val) << 16U) ) | GCCGFX_GEN_ASSERT_FIELD_ACCESS(val, 0xffffUL, __FILE__, __LINE__) )
#define GFXREG_BLITBLEND_GET_BLENDFUNCCOLORBLUEDST(s) ((((s)->colorblueblendfunction) >> 16U) & 0xffffUL)
#define GFXREG_BLITBLEND_COLORBLUEBLENDFUNCTION_BLENDFUNCCOLORBLUEDST_GL_ZERO 0U /*  */
#define GFXREG_BLITBLEND_COLORBLUEBLENDFUNCTION_BLENDFUNCCOLORBLUEDST_GL_ONE 1U /*  */
#define GFXREG_BLITBLEND_COLORBLUEBLENDFUNCTION_BLENDFUNCCOLORBLUEDST_GL_SRC_COLOR 0x0300U /*  */
#define GFXREG_BLITBLEND_COLORBLUEBLENDFUNCTION_BLENDFUNCCOLORBLUEDST_GL_ONE_MINUS_SRC_COLOR 0x0301U /*  */
#define GFXREG_BLITBLEND_COLORBLUEBLENDFUNCTION_BLENDFUNCCOLORBLUEDST_GL_SRC_ALPHA 0x0302U /*  */
#define GFXREG_BLITBLEND_COLORBLUEBLENDFUNCTION_BLENDFUNCCOLORBLUEDST_GL_ONE_MINUS_SRC_ALPHA 0x0303U /*  */
#define GFXREG_BLITBLEND_COLORBLUEBLENDFUNCTION_BLENDFUNCCOLORBLUEDST_GL_DST_ALPHA 0x0304U /*  */
#define GFXREG_BLITBLEND_COLORBLUEBLENDFUNCTION_BLENDFUNCCOLORBLUEDST_GL_ONE_MINUS_DST_ALPHA 0x0305U /*  */
#define GFXREG_BLITBLEND_COLORBLUEBLENDFUNCTION_BLENDFUNCCOLORBLUEDST_GL_DST_COLOR 0x0306U /*  */
#define GFXREG_BLITBLEND_COLORBLUEBLENDFUNCTION_BLENDFUNCCOLORBLUEDST_GL_ONE_MINUS_DST_COLOR 0x0307U /*  */
#define GFXREG_BLITBLEND_COLORBLUEBLENDFUNCTION_BLENDFUNCCOLORBLUEDST_GL_SRC_ALPHA_SATURATE 0x0308U /*  */
#define GFXREG_BLITBLEND_COLORBLUEBLENDFUNCTION_BLENDFUNCCOLORBLUEDST_GL_CONSTANT_COLOR 0x8001U /*  */
#define GFXREG_BLITBLEND_COLORBLUEBLENDFUNCTION_BLENDFUNCCOLORBLUEDST_GL_ONE_MINUS_CONSTANT_COLOR 0x8002U /*  */
#define GFXREG_BLITBLEND_COLORBLUEBLENDFUNCTION_BLENDFUNCCOLORBLUEDST_GL_CONSTANT_ALPHA 0x8003U /*  */
#define GFXREG_BLITBLEND_COLORBLUEBLENDFUNCTION_BLENDFUNCCOLORBLUEDST_GL_ONE_MINUS_CONSTANT_ALPHA 0x8004U /*  */
#define GFXREG_BLITBLEND_COLORBLUEBLENDFUNCTION_BLENDFUNCCOLORBLUEDST_RESET 0x0300U

/* ALPHABLENDFUNCTION: Open GL alpha blending factors */
#define GFXREG_BLITBLEND_ALPHABLENDFUNCTION 0x0000001cU
/* BLENDFUNCALPHASRC: Alpha component source blend function */
#define GFXREG_BLITBLEND_ALPHABLENDFUNCTION_BLENDFUNCALPHASRC_FSHIFT 0U
#define GFXREG_BLITBLEND_ALPHABLENDFUNCTION_BLENDFUNCALPHASRC_FMASK 0xffffU
#define GFXREG_BLITBLEND_ALPHABLENDFUNCTION_SETM_BLENDFUNCALPHASRC(val) (((CYGFX_U32)(val) & 0xffffUL) )
#define GFXREG_BLITBLEND_ALPHABLENDFUNCTION_SET_BLENDFUNCALPHASRC(val) (((CYGFX_U32)(val) ) | GCCGFX_GEN_ASSERT_FIELD_ACCESS(val, 0xffffUL, __FILE__, __LINE__))
#define GFXREG_BLITBLEND_ALPHABLENDFUNCTION_GET_BLENDFUNCALPHASRC(val) (((CYGFX_U32)(val) ) & 0xffffUL)
#define GFXREG_BLITBLEND_SETM_BLENDFUNCALPHASRC(s,val) ( (s)->alphablendfunction = ((s)->alphablendfunction & ~0xffffUL) | (((CYGFX_U32)(val) ) & 0xffffUL) )
#define GFXREG_BLITBLEND_SET_BLENDFUNCALPHASRC(s,val)  ( (s)->alphablendfunction = (((s)->alphablendfunction & ~0xffffUL) | ((CYGFX_U32)(val) ) ) | GCCGFX_GEN_ASSERT_FIELD_ACCESS(val, 0xffffUL, __FILE__, __LINE__) )
#define GFXREG_BLITBLEND_GET_BLENDFUNCALPHASRC(s) ((((s)->alphablendfunction) ) & 0xffffUL)
#define GFXREG_BLITBLEND_ALPHABLENDFUNCTION_BLENDFUNCALPHASRC_GL_ZERO 0U /*  */
#define GFXREG_BLITBLEND_ALPHABLENDFUNCTION_BLENDFUNCALPHASRC_GL_ONE 1U /*  */
#define GFXREG_BLITBLEND_ALPHABLENDFUNCTION_BLENDFUNCALPHASRC_GL_SRC_COLOR 0x0300U /*  */
#define GFXREG_BLITBLEND_ALPHABLENDFUNCTION_BLENDFUNCALPHASRC_GL_ONE_MINUS_SRC_COLOR 0x0301U /*  */
#define GFXREG_BLITBLEND_ALPHABLENDFUNCTION_BLENDFUNCALPHASRC_GL_SRC_ALPHA 0x0302U /*  */
#define GFXREG_BLITBLEND_ALPHABLENDFUNCTION_BLENDFUNCALPHASRC_GL_ONE_MINUS_SRC_ALPHA 0x0303U /*  */
#define GFXREG_BLITBLEND_ALPHABLENDFUNCTION_BLENDFUNCALPHASRC_GL_DST_ALPHA 0x0304U /*  */
#define GFXREG_BLITBLEND_ALPHABLENDFUNCTION_BLENDFUNCALPHASRC_GL_ONE_MINUS_DST_ALPHA 0x0305U /*  */
#define GFXREG_BLITBLEND_ALPHABLENDFUNCTION_BLENDFUNCALPHASRC_GL_DST_COLOR 0x0306U /*  */
#define GFXREG_BLITBLEND_ALPHABLENDFUNCTION_BLENDFUNCALPHASRC_GL_ONE_MINUS_DST_COLOR 0x0307U /*  */
#define GFXREG_BLITBLEND_ALPHABLENDFUNCTION_BLENDFUNCALPHASRC_GL_SRC_ALPHA_SATURATE 0x0308U /*  */
#define GFXREG_BLITBLEND_ALPHABLENDFUNCTION_BLENDFUNCALPHASRC_GL_CONSTANT_COLOR 0x8001U /*  */
#define GFXREG_BLITBLEND_ALPHABLENDFUNCTION_BLENDFUNCALPHASRC_GL_ONE_MINUS_CONSTANT_COLOR 0x8002U /*  */
#define GFXREG_BLITBLEND_ALPHABLENDFUNCTION_BLENDFUNCALPHASRC_GL_CONSTANT_ALPHA 0x8003U /*  */
#define GFXREG_BLITBLEND_ALPHABLENDFUNCTION_BLENDFUNCALPHASRC_GL_ONE_MINUS_CONSTANT_ALPHA 0x8004U /*  */
#define GFXREG_BLITBLEND_ALPHABLENDFUNCTION_BLENDFUNCALPHASRC_RESET 0x0300U

/* BLENDFUNCALPHADST: Alpha component destination blend function */
#define GFXREG_BLITBLEND_ALPHABLENDFUNCTION_BLENDFUNCALPHADST_FSHIFT 16U
#define GFXREG_BLITBLEND_ALPHABLENDFUNCTION_BLENDFUNCALPHADST_FMASK 0xffffU
#define GFXREG_BLITBLEND_ALPHABLENDFUNCTION_SETM_BLENDFUNCALPHADST(val) (((CYGFX_U32)(val) & 0xffffUL) << 16U)
#define GFXREG_BLITBLEND_ALPHABLENDFUNCTION_SET_BLENDFUNCALPHADST(val) (((CYGFX_U32)(val) << 16U) | GCCGFX_GEN_ASSERT_FIELD_ACCESS(val, 0xffffUL, __FILE__, __LINE__))
#define GFXREG_BLITBLEND_ALPHABLENDFUNCTION_GET_BLENDFUNCALPHADST(val) (((CYGFX_U32)(val) >> 16U) & 0xffffUL)
#define GFXREG_BLITBLEND_SETM_BLENDFUNCALPHADST(s,val) ( (s)->alphablendfunction = ((s)->alphablendfunction & ~0xffff0000UL) | (((CYGFX_U32)(val) << 16U) & 0xffff0000UL) )
#define GFXREG_BLITBLEND_SET_BLENDFUNCALPHADST(s,val)  ( (s)->alphablendfunction = (((s)->alphablendfunction & ~0xffff0000UL) | ((CYGFX_U32)(val) << 16U) ) | GCCGFX_GEN_ASSERT_FIELD_ACCESS(val, 0xffffUL, __FILE__, __LINE__) )
#define GFXREG_BLITBLEND_GET_BLENDFUNCALPHADST(s) ((((s)->alphablendfunction) >> 16U) & 0xffffUL)
#define GFXREG_BLITBLEND_ALPHABLENDFUNCTION_BLENDFUNCALPHADST_GL_ZERO 0U /*  */
#define GFXREG_BLITBLEND_ALPHABLENDFUNCTION_BLENDFUNCALPHADST_GL_ONE 1U /*  */
#define GFXREG_BLITBLEND_ALPHABLENDFUNCTION_BLENDFUNCALPHADST_GL_SRC_COLOR 0x0300U /*  */
#define GFXREG_BLITBLEND_ALPHABLENDFUNCTION_BLENDFUNCALPHADST_GL_ONE_MINUS_SRC_COLOR 0x0301U /*  */
#define GFXREG_BLITBLEND_ALPHABLENDFUNCTION_BLENDFUNCALPHADST_GL_SRC_ALPHA 0x0302U /*  */
#define GFXREG_BLITBLEND_ALPHABLENDFUNCTION_BLENDFUNCALPHADST_GL_ONE_MINUS_SRC_ALPHA 0x0303U /*  */
#define GFXREG_BLITBLEND_ALPHABLENDFUNCTION_BLENDFUNCALPHADST_GL_DST_ALPHA 0x0304U /*  */
#define GFXREG_BLITBLEND_ALPHABLENDFUNCTION_BLENDFUNCALPHADST_GL_ONE_MINUS_DST_ALPHA 0x0305U /*  */
#define GFXREG_BLITBLEND_ALPHABLENDFUNCTION_BLENDFUNCALPHADST_GL_DST_COLOR 0x0306U /*  */
#define GFXREG_BLITBLEND_ALPHABLENDFUNCTION_BLENDFUNCALPHADST_GL_ONE_MINUS_DST_COLOR 0x0307U /*  */
#define GFXREG_BLITBLEND_ALPHABLENDFUNCTION_BLENDFUNCALPHADST_GL_SRC_ALPHA_SATURATE 0x0308U /*  */
#define GFXREG_BLITBLEND_ALPHABLENDFUNCTION_BLENDFUNCALPHADST_GL_CONSTANT_COLOR 0x8001U /*  */
#define GFXREG_BLITBLEND_ALPHABLENDFUNCTION_BLENDFUNCALPHADST_GL_ONE_MINUS_CONSTANT_COLOR 0x8002U /*  */
#define GFXREG_BLITBLEND_ALPHABLENDFUNCTION_BLENDFUNCALPHADST_GL_CONSTANT_ALPHA 0x8003U /*  */
#define GFXREG_BLITBLEND_ALPHABLENDFUNCTION_BLENDFUNCALPHADST_GL_ONE_MINUS_CONSTANT_ALPHA 0x8004U /*  */
#define GFXREG_BLITBLEND_ALPHABLENDFUNCTION_BLENDFUNCALPHADST_RESET 0x0300U

/* BLENDMODE1: Open GL and Open VG blending modes for colors red and green */
#define GFXREG_BLITBLEND_BLENDMODE1 0x00000020U
/* BLENDMODECOLORRED: Red component blend mode */
#define GFXREG_BLITBLEND_BLENDMODE1_BLENDMODECOLORRED_FSHIFT 0U
#define GFXREG_BLITBLEND_BLENDMODE1_BLENDMODECOLORRED_FMASK 0xffffU
#define GFXREG_BLITBLEND_BLENDMODE1_SETM_BLENDMODECOLORRED(val) (((CYGFX_U32)(val) & 0xffffUL) )
#define GFXREG_BLITBLEND_BLENDMODE1_SET_BLENDMODECOLORRED(val) (((CYGFX_U32)(val) ) | GCCGFX_GEN_ASSERT_FIELD_ACCESS(val, 0xffffUL, __FILE__, __LINE__))
#define GFXREG_BLITBLEND_BLENDMODE1_GET_BLENDMODECOLORRED(val) (((CYGFX_U32)(val) ) & 0xffffUL)
#define GFXREG_BLITBLEND_SETM_BLENDMODECOLORRED(s,val) ( (s)->blendmode1 = ((s)->blendmode1 & ~0xffffUL) | (((CYGFX_U32)(val) ) & 0xffffUL) )
#define GFXREG_BLITBLEND_SET_BLENDMODECOLORRED(s,val)  ( (s)->blendmode1 = (((s)->blendmode1 & ~0xffffUL) | ((CYGFX_U32)(val) ) ) | GCCGFX_GEN_ASSERT_FIELD_ACCESS(val, 0xffffUL, __FILE__, __LINE__) )
#define GFXREG_BLITBLEND_GET_BLENDMODECOLORRED(s) ((((s)->blendmode1) ) & 0xffffUL)
#define GFXREG_BLITBLEND_BLENDMODE1_BLENDMODECOLORRED_GL_FUNC_ADD 0x8006U /*  */
#define GFXREG_BLITBLEND_BLENDMODE1_BLENDMODECOLORRED_GL_MIN 0x8007U /*  */
#define GFXREG_BLITBLEND_BLENDMODE1_BLENDMODECOLORRED_GL_MAX 0x8008U /*  */
#define GFXREG_BLITBLEND_BLENDMODE1_BLENDMODECOLORRED_GL_FUNC_SUBTRACT 0x800AU /*  */
#define GFXREG_BLITBLEND_BLENDMODE1_BLENDMODECOLORRED_GL_FUNC_REVERSE_SUBTRACT 0x800BU /*  */
#define GFXREG_BLITBLEND_BLENDMODE1_BLENDMODECOLORRED_VG_BLEND_SRC 0x2000U /*  */
#define GFXREG_BLITBLEND_BLENDMODE1_BLENDMODECOLORRED_VG_BLEND_SRC_OVER 0x2001U /*  */
#define GFXREG_BLITBLEND_BLENDMODE1_BLENDMODECOLORRED_VG_BLEND_DST_OVER 0x2002U /*  */
#define GFXREG_BLITBLEND_BLENDMODE1_BLENDMODECOLORRED_VG_BLEND_SRC_IN 0x2003U /*  */
#define GFXREG_BLITBLEND_BLENDMODE1_BLENDMODECOLORRED_VG_BLEND_DST_IN 0x2004U /*  */
#define GFXREG_BLITBLEND_BLENDMODE1_BLENDMODECOLORRED_VG_BLEND_MULTIPLY 0x2005U /*  */
#define GFXREG_BLITBLEND_BLENDMODE1_BLENDMODECOLORRED_VG_BLEND_SCREEN 0x2006U /*  */
#define GFXREG_BLITBLEND_BLENDMODE1_BLENDMODECOLORRED_VG_BLEND_DARKEN 0x2007U /*  */
#define GFXREG_BLITBLEND_BLENDMODE1_BLENDMODECOLORRED_VG_BLEND_LIGHTEN 0x2008U /*  */
#define GFXREG_BLITBLEND_BLENDMODE1_BLENDMODECOLORRED_VG_BLEND_ADDITIVE 0x2009U /*  */
#define GFXREG_BLITBLEND_BLENDMODE1_BLENDMODECOLORRED_RESET 0x8006U

/* BLENDMODECOLORGREEN: Green component blend mode */
#define GFXREG_BLITBLEND_BLENDMODE1_BLENDMODECOLORGREEN_FSHIFT 16U
#define GFXREG_BLITBLEND_BLENDMODE1_BLENDMODECOLORGREEN_FMASK 0xffffU
#define GFXREG_BLITBLEND_BLENDMODE1_SETM_BLENDMODECOLORGREEN(val) (((CYGFX_U32)(val) & 0xffffUL) << 16U)
#define GFXREG_BLITBLEND_BLENDMODE1_SET_BLENDMODECOLORGREEN(val) (((CYGFX_U32)(val) << 16U) | GCCGFX_GEN_ASSERT_FIELD_ACCESS(val, 0xffffUL, __FILE__, __LINE__))
#define GFXREG_BLITBLEND_BLENDMODE1_GET_BLENDMODECOLORGREEN(val) (((CYGFX_U32)(val) >> 16U) & 0xffffUL)
#define GFXREG_BLITBLEND_SETM_BLENDMODECOLORGREEN(s,val) ( (s)->blendmode1 = ((s)->blendmode1 & ~0xffff0000UL) | (((CYGFX_U32)(val) << 16U) & 0xffff0000UL) )
#define GFXREG_BLITBLEND_SET_BLENDMODECOLORGREEN(s,val)  ( (s)->blendmode1 = (((s)->blendmode1 & ~0xffff0000UL) | ((CYGFX_U32)(val) << 16U) ) | GCCGFX_GEN_ASSERT_FIELD_ACCESS(val, 0xffffUL, __FILE__, __LINE__) )
#define GFXREG_BLITBLEND_GET_BLENDMODECOLORGREEN(s) ((((s)->blendmode1) >> 16U) & 0xffffUL)
#define GFXREG_BLITBLEND_BLENDMODE1_BLENDMODECOLORGREEN_GL_FUNC_ADD 0x8006U /*  */
#define GFXREG_BLITBLEND_BLENDMODE1_BLENDMODECOLORGREEN_GL_MIN 0x8007U /*  */
#define GFXREG_BLITBLEND_BLENDMODE1_BLENDMODECOLORGREEN_GL_MAX 0x8008U /*  */
#define GFXREG_BLITBLEND_BLENDMODE1_BLENDMODECOLORGREEN_GL_FUNC_SUBTRACT 0x800AU /*  */
#define GFXREG_BLITBLEND_BLENDMODE1_BLENDMODECOLORGREEN_GL_FUNC_REVERSE_SUBTRACT 0x800BU /*  */
#define GFXREG_BLITBLEND_BLENDMODE1_BLENDMODECOLORGREEN_VG_BLEND_SRC 0x2000U /*  */
#define GFXREG_BLITBLEND_BLENDMODE1_BLENDMODECOLORGREEN_VG_BLEND_SRC_OVER 0x2001U /*  */
#define GFXREG_BLITBLEND_BLENDMODE1_BLENDMODECOLORGREEN_VG_BLEND_DST_OVER 0x2002U /*  */
#define GFXREG_BLITBLEND_BLENDMODE1_BLENDMODECOLORGREEN_VG_BLEND_SRC_IN 0x2003U /*  */
#define GFXREG_BLITBLEND_BLENDMODE1_BLENDMODECOLORGREEN_VG_BLEND_DST_IN 0x2004U /*  */
#define GFXREG_BLITBLEND_BLENDMODE1_BLENDMODECOLORGREEN_VG_BLEND_MULTIPLY 0x2005U /*  */
#define GFXREG_BLITBLEND_BLENDMODE1_BLENDMODECOLORGREEN_VG_BLEND_SCREEN 0x2006U /*  */
#define GFXREG_BLITBLEND_BLENDMODE1_BLENDMODECOLORGREEN_VG_BLEND_DARKEN 0x2007U /*  */
#define GFXREG_BLITBLEND_BLENDMODE1_BLENDMODECOLORGREEN_VG_BLEND_LIGHTEN 0x2008U /*  */
#define GFXREG_BLITBLEND_BLENDMODE1_BLENDMODECOLORGREEN_VG_BLEND_ADDITIVE 0x2009U /*  */
#define GFXREG_BLITBLEND_BLENDMODE1_BLENDMODECOLORGREEN_RESET 0x8006U

/* BLENDMODE2: Open GL and Open VG blending modes for color blue and alpha */
#define GFXREG_BLITBLEND_BLENDMODE2 0x00000024U
/* BLENDMODECOLORBLUE: Blue component blend mode */
#define GFXREG_BLITBLEND_BLENDMODE2_BLENDMODECOLORBLUE_FSHIFT 0U
#define GFXREG_BLITBLEND_BLENDMODE2_BLENDMODECOLORBLUE_FMASK 0xffffU
#define GFXREG_BLITBLEND_BLENDMODE2_SETM_BLENDMODECOLORBLUE(val) (((CYGFX_U32)(val) & 0xffffUL) )
#define GFXREG_BLITBLEND_BLENDMODE2_SET_BLENDMODECOLORBLUE(val) (((CYGFX_U32)(val) ) | GCCGFX_GEN_ASSERT_FIELD_ACCESS(val, 0xffffUL, __FILE__, __LINE__))
#define GFXREG_BLITBLEND_BLENDMODE2_GET_BLENDMODECOLORBLUE(val) (((CYGFX_U32)(val) ) & 0xffffUL)
#define GFXREG_BLITBLEND_SETM_BLENDMODECOLORBLUE(s,val) ( (s)->blendmode2 = ((s)->blendmode2 & ~0xffffUL) | (((CYGFX_U32)(val) ) & 0xffffUL) )
#define GFXREG_BLITBLEND_SET_BLENDMODECOLORBLUE(s,val)  ( (s)->blendmode2 = (((s)->blendmode2 & ~0xffffUL) | ((CYGFX_U32)(val) ) ) | GCCGFX_GEN_ASSERT_FIELD_ACCESS(val, 0xffffUL, __FILE__, __LINE__) )
#define GFXREG_BLITBLEND_GET_BLENDMODECOLORBLUE(s) ((((s)->blendmode2) ) & 0xffffUL)
#define GFXREG_BLITBLEND_BLENDMODE2_BLENDMODECOLORBLUE_GL_FUNC_ADD 0x8006U /*  */
#define GFXREG_BLITBLEND_BLENDMODE2_BLENDMODECOLORBLUE_GL_MIN 0x8007U /*  */
#define GFXREG_BLITBLEND_BLENDMODE2_BLENDMODECOLORBLUE_GL_MAX 0x8008U /*  */
#define GFXREG_BLITBLEND_BLENDMODE2_BLENDMODECOLORBLUE_GL_FUNC_SUBTRACT 0x800AU /*  */
#define GFXREG_BLITBLEND_BLENDMODE2_BLENDMODECOLORBLUE_GL_FUNC_REVERSE_SUBTRACT 0x800BU /*  */
#define GFXREG_BLITBLEND_BLENDMODE2_BLENDMODECOLORBLUE_VG_BLEND_SRC 0x2000U /*  */
#define GFXREG_BLITBLEND_BLENDMODE2_BLENDMODECOLORBLUE_VG_BLEND_SRC_OVER 0x2001U /*  */
#define GFXREG_BLITBLEND_BLENDMODE2_BLENDMODECOLORBLUE_VG_BLEND_DST_OVER 0x2002U /*  */
#define GFXREG_BLITBLEND_BLENDMODE2_BLENDMODECOLORBLUE_VG_BLEND_SRC_IN 0x2003U /*  */
#define GFXREG_BLITBLEND_BLENDMODE2_BLENDMODECOLORBLUE_VG_BLEND_DST_IN 0x2004U /*  */
#define GFXREG_BLITBLEND_BLENDMODE2_BLENDMODECOLORBLUE_VG_BLEND_MULTIPLY 0x2005U /*  */
#define GFXREG_BLITBLEND_BLENDMODE2_BLENDMODECOLORBLUE_VG_BLEND_SCREEN 0x2006U /*  */
#define GFXREG_BLITBLEND_BLENDMODE2_BLENDMODECOLORBLUE_VG_BLEND_DARKEN 0x2007U /*  */
#define GFXREG_BLITBLEND_BLENDMODE2_BLENDMODECOLORBLUE_VG_BLEND_LIGHTEN 0x2008U /*  */
#define GFXREG_BLITBLEND_BLENDMODE2_BLENDMODECOLORBLUE_VG_BLEND_ADDITIVE 0x2009U /*  */
#define GFXREG_BLITBLEND_BLENDMODE2_BLENDMODECOLORBLUE_RESET 0x8006U

/* BLENDMODEALPHA: Alpha component blend mode */
#define GFXREG_BLITBLEND_BLENDMODE2_BLENDMODEALPHA_FSHIFT 16U
#define GFXREG_BLITBLEND_BLENDMODE2_BLENDMODEALPHA_FMASK 0xffffU
#define GFXREG_BLITBLEND_BLENDMODE2_SETM_BLENDMODEALPHA(val) (((CYGFX_U32)(val) & 0xffffUL) << 16U)
#define GFXREG_BLITBLEND_BLENDMODE2_SET_BLENDMODEALPHA(val) (((CYGFX_U32)(val) << 16U) | GCCGFX_GEN_ASSERT_FIELD_ACCESS(val, 0xffffUL, __FILE__, __LINE__))
#define GFXREG_BLITBLEND_BLENDMODE2_GET_BLENDMODEALPHA(val) (((CYGFX_U32)(val) >> 16U) & 0xffffUL)
#define GFXREG_BLITBLEND_SETM_BLENDMODEALPHA(s,val) ( (s)->blendmode2 = ((s)->blendmode2 & ~0xffff0000UL) | (((CYGFX_U32)(val) << 16U) & 0xffff0000UL) )
#define GFXREG_BLITBLEND_SET_BLENDMODEALPHA(s,val)  ( (s)->blendmode2 = (((s)->blendmode2 & ~0xffff0000UL) | ((CYGFX_U32)(val) << 16U) ) | GCCGFX_GEN_ASSERT_FIELD_ACCESS(val, 0xffffUL, __FILE__, __LINE__) )
#define GFXREG_BLITBLEND_GET_BLENDMODEALPHA(s) ((((s)->blendmode2) >> 16U) & 0xffffUL)
#define GFXREG_BLITBLEND_BLENDMODE2_BLENDMODEALPHA_GL_FUNC_ADD 0x8006U /*  */
#define GFXREG_BLITBLEND_BLENDMODE2_BLENDMODEALPHA_GL_MIN 0x8007U /*  */
#define GFXREG_BLITBLEND_BLENDMODE2_BLENDMODEALPHA_GL_MAX 0x8008U /*  */
#define GFXREG_BLITBLEND_BLENDMODE2_BLENDMODEALPHA_GL_FUNC_SUBTRACT 0x800AU /*  */
#define GFXREG_BLITBLEND_BLENDMODE2_BLENDMODEALPHA_GL_FUNC_REVERSE_SUBTRACT 0x800BU /*  */
#define GFXREG_BLITBLEND_BLENDMODE2_BLENDMODEALPHA_VG_BLEND_SRC 0x2000U /*  */
#define GFXREG_BLITBLEND_BLENDMODE2_BLENDMODEALPHA_VG_BLEND_SRC_OVER 0x2001U /*  */
#define GFXREG_BLITBLEND_BLENDMODE2_BLENDMODEALPHA_VG_BLEND_DST_OVER 0x2002U /*  */
#define GFXREG_BLITBLEND_BLENDMODE2_BLENDMODEALPHA_VG_BLEND_SRC_IN 0x2003U /*  */
#define GFXREG_BLITBLEND_BLENDMODE2_BLENDMODEALPHA_VG_BLEND_DST_IN 0x2004U /*  */
#define GFXREG_BLITBLEND_BLENDMODE2_BLENDMODEALPHA_VG_BLEND_MULTIPLY 0x2005U /*  */
#define GFXREG_BLITBLEND_BLENDMODE2_BLENDMODEALPHA_VG_BLEND_SCREEN 0x2006U /*  */
#define GFXREG_BLITBLEND_BLENDMODE2_BLENDMODEALPHA_VG_BLEND_DARKEN 0x2007U /*  */
#define GFXREG_BLITBLEND_BLENDMODE2_BLENDMODEALPHA_VG_BLEND_LIGHTEN 0x2008U /*  */
#define GFXREG_BLITBLEND_BLENDMODE2_BLENDMODEALPHA_VG_BLEND_ADDITIVE 0x2009U /*  */
#define GFXREG_BLITBLEND_BLENDMODE2_BLENDMODEALPHA_RESET 0x8006U

/* DIRECTSETUP: Direct Control of the BlitBlend Datapath multiplexers, do not change */
#define GFXREG_BLITBLEND_DIRECTSETUP 0x00000028U
/* COLORDEBUG: Sets the multiplexers of the color datapath directly, do not change */
#define GFXREG_BLITBLEND_DIRECTSETUP_COLORDEBUG_FSHIFT 0U
#define GFXREG_BLITBLEND_DIRECTSETUP_COLORDEBUG_FMASK 0x3ffU
#define GFXREG_BLITBLEND_DIRECTSETUP_SETM_COLORDEBUG(val) (((CYGFX_U32)(val) & 0x3ffUL) )
#define GFXREG_BLITBLEND_DIRECTSETUP_SET_COLORDEBUG(val) (((CYGFX_U32)(val) ) | GCCGFX_GEN_ASSERT_FIELD_ACCESS(val, 0x3ffUL, __FILE__, __LINE__))
#define GFXREG_BLITBLEND_DIRECTSETUP_GET_COLORDEBUG(val) (((CYGFX_U32)(val) ) & 0x3ffUL)
#define GFXREG_BLITBLEND_SETM_COLORDEBUG(s,val) ( (s)->directsetup = ((s)->directsetup & ~0x3ffUL) | (((CYGFX_U32)(val) ) & 0x3ffUL) )
#define GFXREG_BLITBLEND_SET_COLORDEBUG(s,val)  ( (s)->directsetup = (((s)->directsetup & ~0x3ffUL) | ((CYGFX_U32)(val) ) ) | GCCGFX_GEN_ASSERT_FIELD_ACCESS(val, 0x3ffUL, __FILE__, __LINE__) )
#define GFXREG_BLITBLEND_GET_COLORDEBUG(s) ((((s)->directsetup) ) & 0x3ffUL)
#define GFXREG_BLITBLEND_DIRECTSETUP_COLORDEBUG_RESET 0x0U

/* ALPHADEBUG: Sets the multiplexers of the alpha datapath directly, do not change */
#define GFXREG_BLITBLEND_DIRECTSETUP_ALPHADEBUG_FSHIFT 16U
#define GFXREG_BLITBLEND_DIRECTSETUP_ALPHADEBUG_FMASK 0x3ffU
#define GFXREG_BLITBLEND_DIRECTSETUP_SETM_ALPHADEBUG(val) (((CYGFX_U32)(val) & 0x3ffUL) << 16U)
#define GFXREG_BLITBLEND_DIRECTSETUP_SET_ALPHADEBUG(val) (((CYGFX_U32)(val) << 16U) | GCCGFX_GEN_ASSERT_FIELD_ACCESS(val, 0x3ffUL, __FILE__, __LINE__))
#define GFXREG_BLITBLEND_DIRECTSETUP_GET_ALPHADEBUG(val) (((CYGFX_U32)(val) >> 16U) & 0x3ffUL)
#define GFXREG_BLITBLEND_SETM_ALPHADEBUG(s,val) ( (s)->directsetup = ((s)->directsetup & ~0x3ff0000UL) | (((CYGFX_U32)(val) << 16U) & 0x3ff0000UL) )
#define GFXREG_BLITBLEND_SET_ALPHADEBUG(s,val)  ( (s)->directsetup = (((s)->directsetup & ~0x3ff0000UL) | ((CYGFX_U32)(val) << 16U) ) | GCCGFX_GEN_ASSERT_FIELD_ACCESS(val, 0x3ffUL, __FILE__, __LINE__) )
#define GFXREG_BLITBLEND_GET_ALPHADEBUG(s) ((((s)->directsetup) >> 16U) & 0x3ffUL)
#define GFXREG_BLITBLEND_DIRECTSETUP_ALPHADEBUG_RESET 0x0U

/* PRIMCONTROLWORD: Value of last received primary control word */
#define GFXREG_BLITBLEND_PRIMCONTROLWORD 0x0000002cU
/* P_VAL: Value of last received control word on primary input. If a 39 bit pixel channel is connected, the mapping is as follows: p_val[31:0] = { data[37:22], data[19:12], data[9:2] }. For debug purposes only, read when stable only, otherwise read data might be corrupted. */
#define GFXREG_BLITBLEND_PRIMCONTROLWORD_P_VAL_FSHIFT 0U
#define GFXREG_BLITBLEND_PRIMCONTROLWORD_P_VAL_FMASK 0xffffffffU
#define GFXREG_BLITBLEND_PRIMCONTROLWORD_GET_P_VAL(val) (((CYGFX_U32)(val) ) & 0xffffffffUL)
#define GFXREG_BLITBLEND_GET_P_VAL(s) ((((s)->primcontrolword) ) & 0xffffffffUL)
#define GFXREG_BLITBLEND_PRIMCONTROLWORD_P_VAL_RESET (none)U

/* SECCONTROLWORD: Value of last received secondary control word */
#define GFXREG_BLITBLEND_SECCONTROLWORD 0x00000030U
/* S_VAL: Value of last received control word on secondary input. If a 39 bit pixel channel is connected, the mapping is as follows: s_val[31:0] = { data[37:22], data[19:12], data[9:2] }. For debug purposes only, read when stable only, otherwise read data might be corrupted. */
#define GFXREG_BLITBLEND_SECCONTROLWORD_S_VAL_FSHIFT 0U
#define GFXREG_BLITBLEND_SECCONTROLWORD_S_VAL_FMASK 0xffffffffU
#define GFXREG_BLITBLEND_SECCONTROLWORD_GET_S_VAL(val) (((CYGFX_U32)(val) ) & 0xffffffffUL)
#define GFXREG_BLITBLEND_GET_S_VAL(s) ((((s)->seccontrolword) ) & 0xffffffffUL)
#define GFXREG_BLITBLEND_SECCONTROLWORD_S_VAL_RESET (none)U



/*! \endcond Hide for doxygen */

#endif /* GFXREG_BLITBLEND_REGISTER_H */

